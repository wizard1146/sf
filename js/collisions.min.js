collisions=function(){let _=function(_,t){const s=_.radius*_.scale,n=t.radius*t.scale,e=t.x-_.x,h=t.y-_.y,r=s+n,i=e*e+h*h;if(i>r*r)return!1;if(result){const _=Math.sqrt(i);result.a_in_b=s<=n&&_<=n-s,result.b_in_a=n<=s&&_<=s-n,result.overlap=r-_,result.overlap_x=e/_,result.overlap_y=h/_}return!0},t=function(_,t,s,n,e){const h=_.length,r=t.length;if(!h||!r)return!0;let i=null,o=null,l=null,a=null;for(let t=0,e=1;t<h;t+=2,e+=2){const h=_[t]*s+_[e]*n;(null===i||i>h)&&(i=h),(null===o||o<h)&&(o=h)}for(let _=0,e=1;_<r;_+=2,e+=2){const h=t[_]*s+t[e]*n;(null===l||l>h)&&(l=h),(null===a||a<h)&&(a=h)}if(i>a||o<l)return!0;if(e){let _=0;if(i<l)if(e.a_in_b=!1,o<a)_=o-l,e.b_in_a=!1;else{const t=o-l,s=a-i;_=t<s?t:-s}else if(e.b_in_a=!1,o>a)_=i-a,e.a_in_b=!1;else{const t=o-l,s=a-i;_=t<s?t:-s}const t=e.overlap,h=_<0?-_:_;if(null===t||t>h){const t=_<0?-1:1;e.overlap=h,e.overlap_x=s*t,e.overlap_y=n*t}}return!1},s=function(_,t,s,n){const e=_._coords,h=_._edges,r=_._normals,i=t.x,o=t.y,l=t.radius*t.scale,a=2*l,c=l*l,b=e.length;let v=!0,x=!0,y=null,u=0,m=0;if(2===b){const _=i-e[0],t=o-e[1],n=_*_+t*t;if(n>c)return!1;if(s){const s=Math.sqrt(n);y=l-s,u=_/s,m=t/s,x=!1}}else for(let _=0,t=1;_<b;_+=2,t+=2){const n=i-e[_],f=o-e[t],d=h[_],p=h[t],g=n*d+f*p,w=g<0?-1:g>d*d+p*p?1:0;let T=!1,B=0,C=0,M=0;if(s&&v&&n*n+f*f>c&&(v=!1),w){const t=-1===w,r=t?0===_?b-2:_-2:_===b-2?0:_+2,a=r+1,v=i-e[r],y=o-e[a],u=h[r],m=h[a],d=v*u+y*m;if((d<0?-1:d>u*u+m*m?1:0)===-w){const _=t?n:v,e=t?f:y,h=_*_+e*e;if(h>c)return!1;if(s){const t=Math.sqrt(h);T=!0,B=l-t,C=_/t,M=e/t,x=!1}}}else{const e=r[_],h=r[t],i=n*e+f*h;if(i>0&&(i<0?-i:i)>l)return!1;s&&(T=!0,B=l-i,C=e,M=h,(x&&i>=0||B<a)&&(x=!1))}T&&(null===y||y>B)&&(y=B,u=C,m=M)}return s&&(s.a_in_b=n?x:v,s.b_in_a=n?v:x,s.overlap=y,s.overlap_x=n?-u:u,s.overlap_y=n?-m:m),!0},n=function(n,e,h,r){const i=n._polygon,o=e._polygon;let l=!1;return h&&(h.a=n,h.b=e,h.a_in_b=!0,h.b_in_a=!0,h.overlap=null,h.overlap_x=0,h.overlap_y=0),i&&(n._dirty_coords||n.x!==n._x||n.y!==n._y||n.angle!==n._angle||n.scale_x!==n._scale_x||n.scale_y!==n._scale_y)&&n._calculateCoords(),o&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),r&&!function(_,t){const s=_._polygon,n=s?0:_.x,e=s?0:_.y,h=s?0:_.radius*_.scale,r=s?_._min_x:n-h,i=s?_._max_x:n+h,o=s?_._min_y:e-h,l=s?_._max_y:e-h,a=t._polygon,c=a?0:t.x,b=a?0:t.y,v=a?0:t.radius*t.scale,x=a?t._min_x:c-v,y=a?t._max_x:c+v,u=a?t._min_y:b-v,m=a?t._max_y:b-v;return r<y&&o<m&&i>x&&l>u}(n,e)||(i&&n._dirty_normals&&n._calculateNormals(),o&&e._dirty_normals&&e._calculateNormals(),l=i&&o?function(_,s,n){const e=_._coords.length,h=s._coords.length;if(2===e&&2===h){const t=_._coords,e=s._coords;return n&&(n.overlap=0),t[0]===e[0]&&t[1]===e[1]}const r=_._coords,i=s._coords,o=_._normals,l=s._normals;if(e>2)for(let _=0,s=1;_<e;_+=2,s+=2)if(t(r,i,o[_],o[s],n))return!1;if(h>2)for(let _=0,s=1;_<h;_+=2,s+=2)if(t(r,i,l[_],l[s],n))return!1;return!0}(n,e,h):i?s(n,e,h,!1):o?s(e,n,h,!0):_(n,e)),h&&(h.collision=l),l};class e{constructor(_,t,s){this.x=_,this.y=t,this.padding=s,this._bvh_branch=!1,this._bvh=null,this._bvh_parent=null,this._bvh_padding=0,this._bvh_min_x=0,this._bvh_max_x=0,this._bvh_min_y=0,this._bvh_max_y=0}collides(_,t,s){return n(this,_,t,s)}potentials(_,t){const s=this._bvh;if(null===s)throw new Error("Body does not belong to a collision system");return s.potentials(this,_,t||[])}remove(){const _=this._bvh;_&&_.remove(this,!1)}}class h extends e{constructor(_,t,s,n,e){super(_,t,e||0),this._polygon=!1,this._circle=!0,this.radius=s,this.scale=n}}class r extends e{constructor(_,t,s,n,e,h,r){super(_,t,r||0),this._polygon=!0,this._circle=!1,this.angle=n||0,this.scale_x=e||1,this.scale_y=h||1,this._x=_,this._y=t,this._scale_x=e,this._scale_y=h,this.setPoints(s)}setPoints(_){const t=_.length;this._points=new Float64Array(2*t),this._coords=new Float64Array(2*t),this._edges=new Float64Array(2*t),this._normals=new Float64Array(2*t);const s=this._points;for(let n=0,e=0,h=1;n<t;n++,e+=2,h+=2){const t=_[n];s[e]=t[0],s[h]=t[1]}this._dirty_coords=!0}_calculateCoords(){const{x:_,y:t,angle:s,scale_x:n,scale_y:e,_points:h,_coords:r}=this,i=h.length;let o=0,l=0,a=0,c=0;for(let b=0,v=1;b<i;b+=2,v+=2){let i=h[b]*n,x=h[v]*e;if(s){const _=Math.cos(s),t=Math.sin(s),n=i;i=n*_-x*t,x=n*t+x*_}i+=_,x+=t,r[b]=i,r[v]=x,0===b?(o=l=i,a=c=x):(i<o?o=i:i>l&&(l=i),x<a?a=x:x>c&&(c=x)),this._x=_,this._y=t,this._angle=s,this._scale_x=n,this._scale_y=e,this._min_x=o,this._max_x=l,this._min_y=a,this._max_y=c,this._dirty_coords=!1,this._dirty_normals=!0}}_calculateNormals(){const{_coords:_,_edges:t,_normals:s}=this,n=_.length;for(let e=0,h=1;e<n;e+=2,h+=2){const r=e+2<n?e+2:0,i=_[r]-_[e],o=_[r+1]-_[h],l=i||o?Math.sqrt(i*i+o*o):0;t[e]=i,t[h]=o,s[e]=l?o/l:0,s[h]=l?-i/l:0}this._dirty_normals=!1}}class i extends r{constructor(_,t,s){super(_,t,[[0,0]],0,1,1,s),this._point=!0}}branch_pool=[];class o{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(_,t){if(!t){const t=_._bvh;if(t&&t!==this)throw new Error("Body belongs to another collision system");_._bvh=this,this._bodies.push(_)}const s=_._polygon,n=_.x,e=_.y;s&&(_._dirty_coords||_.x!==_._x||_.y!==_._y||_.angle!==_._angle||_.scale_x!==_._scale_x||_.scale_y!==_._scale_y)&&_._calculateCoords();const h=_._bvh_padding,r=s?0:_.radius*_.scale,i=(s?_._min_x:n-r)-h,o=(s?_._max_x:n+r)-h,a=(s?_._min_y:e-r)-h,c=(s?_._max_y:e+r)-h;_._bvh_min_x=i,_._bvh_max_x=o,_._bvh_min_y=a,_._bvh_max_y=c;let b=this._hierarchy,v=0;if(b)for(;;){if(!b._bvh_branch){const t=b._bvh_parent,s=b._bvh_min_x,n=b._bvh_min_y,e=b._bvh_max_x,h=b._bvh_max_y,r=b._bvh_parent=_._bvh_parent=l.getBranch();r._bvh_parent=t,r._bvh_left=b,r._bvh_right=_,r._bvh_sort=v++,r._bvh_min_x=i<s?i:s,r._bvh_min_y=a<n?a:n,r._bvh_max_x=o>e?o:e,r._bvh_max_y=c>h?c:h,t?t._bvh_left===b?t._bvh_left=r:t._bvh_right=r:this._hierarchy=r;break}{const _=b._bvh_left,t=_._bvh_max_x,s=_._bvh_min_y,n=_._bvh_max_y,e=i<_._bvh_min_x?i:_._bvh_min_x,h=a<s?a:s,r=o>t?o:t,l=c>n?c:n,x=(r-e)*(l-h)-(t-_._bvh_min_x)*(n-s),y=b._bvh_right,u=y._bvh_min_x,m=y._bvh_min_y,f=y._bvh_max_x,d=y._bvh_max_y,p=i<u?i:u,g=a<m?a:m,w=o>f?o:f,T=c>d?c:d,B=(w-p)*(T-g)-(f-u)*(d-m);b._bvh_sort=v++,b._bvh_min_x=e<p?e:p,b._bvh_min_y=h<g?h:g,b._bvh_max_x=r>w?r:w,b._bvh_max_y=l>T?l:T,b=x<=B?_:y}}else this._hierarchy=_}remove(_,t){if(!t){const t=_._bvh;if(t&&t!==this)throw new Error("Body belongs to another collision system");_._bvh=null,this._bodies.splice(this._bodies.indexOf(_),1)}this._hierarchy===_&&(this._hierarchy=null);const s=_._bvh_parent,n=s._bvh_parent,e=s._bvh_left,h=e===_?s._bvh_right:e;if(h._bvh_parent=n,h._bvh_branch&&(h._bvh_sort=s._bvh_sort),n){n._bvh_left===s?n._bvh_left=h:n._bvh_right=h;let _=n;for(;_;){const t=_._bvh_left,s=t._bvh_min_x,n=t._bvh_max_x,e=t._bvh_min_y,h=t._bvh_max_y,r=_._bvh_right,i=r._bvh_min_x,o=r._bvh_min_y,l=r._bvh_max_x,a=r._bvh_max_y;_._bvh_min_x=s<i?s:i,_._bvh_min_y=e<o?e:o,_._bvh_max_x=n>l?n:l,_._bvh_max_y=h>a?h:a,_=_._bvh_parent}}else this._hierarchy=h;l.releaseBranch(s)}update(){const _=this._bodies,t=_.length;for(let s=0;s<t;++s){let t=_[s],n=!1;if(n||t.padding===t._bvh_padding||(t._bvh_padding=t.padding,n=!0),!n){const _=t._polygon;_&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const s=t.x,e=t.y,h=_?0:t.radius*t.scale,r=_?t._min_x:s-h,i=_?t._min_y:e-h,o=_?t._max_x:s+h,l=_?t._max_y:e+h;n=r<t._bvh_min_x||i<t._bvh_min_y||o>t._bvh_max_x||l>t._bvh_max_y}n&&(this.remove(t,!0),this.insert(t,!0))}}potentials(_,t,s){const n=_._bvh_min_x,e=_._bvh_min_y,h=_._bvh_max_x,r=_._bvh_max_y;let i=this._hierarchy,o=!0;if(!i||!i._bvh_branch)return s;for(;i;){if(o){o=!1;let _=i._bvh_branch?i._bvh_left:null;for(;_&&_._bvh_max_x>=n&&_._bvh_max_y>=e&&_._bvh_min_x<=h&&_._bvh_min_y<=r;)i=_,_=i._bvh_branch?i._bvh_left:null}const l=i._bvh_branch?i._bvh_right:null;if(l&&l._bvh_max_x>n&&l._bvh_max_y>e&&l._bvh_min_x<h&&l._bvh_min_y<r)i=l,o=!0;else{i._bvh_branch||i===_||t&&!t(_,i)||s.push(i);let n=i._bvh_parent;if(!n)break;for(;n&&n._bvh_right===i;)i=n,n=i._bvh_parent;i=n}}return s}}class l{constructor(){this._bvh_branch=!0,this._bvh_parent=null,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_max_x=0,this._bvh_min_y=0,this._bvh_max_y=0}static getBranch(){return branch_pool.length?branch_pool.pop():new l}static releaseBranch(_){branch_pool.push(_)}static sortBranches(_,t){return _._bvh_sort>t._bvh_sort?-1:1}}console.log(l);let a=function(_,t){for(const s of _)s._circle?c(s,t):b(s,t)},c=function(_,t){const{x:s,y:n}=_,e=_.radius*_.scale;t.moveTo(s+e,n),t.arc(s,n,e,0,2*Math.PI)},b=function(_,t){(_._dirty_coords||_.x!==_._x||_.y!==_._y||_.angle!==_._angle||_.scale_x!==_._scale_x||_.scale_y!==_._scale_y)&&_._calculateCoords(),_._calculateCoords();const s=_._coords;if(2===s.length)t.moveTo(s[0],s[1]),t.arc(s[0],s[1],1,0,2*Math.PI);else{t.moveTo(s[0],s[1]);for(let _=2;_<s.length;_+=2)t.lineTo(s[_],s[_+1]);s.length>4&&t.lineTo(s[0],s[1])}};class v{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.b_in_a=!1,this.overlap=null,this.overlap_x=0,this.overlap_y=0}}return{circle:h,polygon:r,point:i,draw:a,drawBVH:function(_,t){let s=_._hierarchy,n=!0;for(;s;){if(n){n=!1;let _=s._bvh_branch?s._bvh_left:null;for(;_;)s=_,_=s._bvh_branch?s._bvh_left:null}const _=s._bvh_branch,e=s._bvh_min_x,h=s._bvh_max_x,r=s._bvh_min_y,i=s._bvh_max_y,o=_?s._bvh_right:null;if(t.moveTo(e,r),t.lineTo(h,r),t.lineTo(h,i),t.lineTo(e,i),t.lineTo(e,r),o)s=o,n=!0;else{let _=s._bvh_parent;if(!_)break;for(;_&&_._bvh_right===s;)s=_,_=s._bvh_parent;s=_}}},bvh:o,generate:class{constructor(){this._bvh=new o}createResult(){return new v}createCircle(_,t,s,n,e){const r=new h(_,t,s,n,e);return this._bvh.insert(r),r}createPolygon(_,t,s,n,e,h,i){const o=new r(_,t,s,n,e,h,i);return this._bvh.insert(o),o}createPoint(_,t,s){const n=new i(_,t,s);return this._bvh.insert(n),n}insert(_){for(const t of _)this._bvh.insert(t,!1);return this}remove(_){for(const t of _)this._bvh.remove(t,!1);return this}update(){return this._bvh.update(),this}potentials(_,t,s){return this._bvh.potentials(_,t,s)}collides(_,t,s,e){return n(_,t,s,e)}bodies(){return this._bvh._bodies}render(_){a(this._bvh._bodies,_)}}}}();